using Azure.Identity;
using Azure.Security.KeyVault.Secrets;
using System;
using System.Threading.Tasks;

public class KeyVaultHelper
{
    private readonly string keyVaultUri;

    public KeyVaultHelper(string keyVaultUri)
    {
        this.keyVaultUri = keyVaultUri;
    }

    public async Task<string> GetSecretAsync(string secretName)
    {
        try
        {
            var client = new SecretClient(new Uri(keyVaultUri), new DefaultAzureCredential());

            KeyVaultSecret secret = await client.GetSecretAsync(secretName);

            return secret.Value;
        }
        catch (Exception ex)
        {
            // Handle exceptions as needed (e.g., log, return default value, or rethrow).
            // Make sure to handle exceptions gracefully in a production application.
            throw ex;
        }
    }
}




public class YourController : Controller
{
    private readonly KeyVaultHelper keyVaultHelper;

    public YourController()
    {
        string keyVaultUri = ConfigurationManager.AppSettings["KeyVaultUri"];
        keyVaultHelper = new KeyVaultHelper(keyVaultUri);
    }

    public async Task<ActionResult> YourAction()
    {
        try
        {
            string connectionString = await keyVaultHelper.GetSecretAsync("YourConnectionStringSecretName");

            // Now you can use the connection string in your application.

            return View();
        }
        catch (Exception ex)
        {
            // Handle exceptions as needed.
            // Make sure to handle exceptions gracefully in a production application.
            return View("Error");
        }
    }
}




<appSettings>
    <add key="KeyVaultUri" value="https://your-key-vault-name.vault.azure.net/" />
</appSettings>
